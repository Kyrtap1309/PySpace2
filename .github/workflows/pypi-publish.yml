name: Publish Python package to PyPi

on:
  push:
    branches:
      - main  # Uruchamiany na push do głównego brancha
  workflow_dispatch:  # Pozwala na ręczne wywołanie workflow

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        persist-credentials: false  # Wyłączanie zapisywania poświadczeń

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: python -m pip install --upgrade build toml

    - name: Extract version from pyproject.toml
      id: get_version
      run: |
        VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Configure Git for GitHub Actions
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"

    - name: Set up GitHub authentication
      run: |
        git remote set-url origin https://x-access-token:${{ secrets.MY_PAT }}@github.com/${{ github.repository }}.git

    - name: Create Git tag
      run: |
        git tag -a "v${{ env.VERSION }}" -m "Release version ${{ env.VERSION }}"
        git push origin "v${{ env.VERSION }}"

    - name: Install build dependencies
      run: python -m pip install --upgrade build

    - name: Build package
      run: python -m build

    - name: Publish to PyPI
      if: startsWith(github.ref, 'refs/tags/')
      env:
        TWINE_USERNAME: "__token__"
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: python -m pip install --upgrade twine && python -m twine upload dist/*
